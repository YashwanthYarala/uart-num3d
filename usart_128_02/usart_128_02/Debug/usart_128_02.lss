
usart_128_02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000949  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085a  00000000  00000000  00000c25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002aa  00000000  00000000  0000147f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  0000172c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000461  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024f  00000000  00000000  00001c29  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001e78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	71 d0       	rcall	.+226    	; 0x17c <main>
  9a:	9e c0       	rjmp	.+316    	; 0x1d8 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <_Z9uart_initj>:
}
unsigned char uart_rx()
{
	while(!((UCSR0A)&(1<<RXC0)));
	return UDR0;
}
  9e:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  a2:	89 b9       	out	0x09, r24	; 9
  a4:	8a b1       	in	r24, 0x0a	; 10
  a6:	88 61       	ori	r24, 0x18	; 24
  a8:	8a b9       	out	0x0a, r24	; 10
  aa:	e5 e9       	ldi	r30, 0x95	; 149
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <_Z7uart_txh>:
  b6:	5d 9b       	sbis	0x0b, 5	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <_Z7uart_txh>
  ba:	8c b9       	out	0x0c, r24	; 12
  bc:	08 95       	ret

000000be <_Z8intarrayi>:

// transmmitting integers//
void intarray( int num)
{int i;
  be:	af 92       	push	r10
  c0:	bf 92       	push	r11
  c2:	cf 92       	push	r12
  c4:	df 92       	push	r13
  c6:	ef 92       	push	r14
  c8:	ff 92       	push	r15
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	00 d0       	rcall	.+0      	; 0xd4 <_Z8intarrayi+0x16>
  d4:	00 d0       	rcall	.+0      	; 0xd6 <_Z8intarrayi+0x18>
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	8c 01       	movw	r16, r24
	unsigned char number[4];
	int dup = num;
	 int dup2 = num;
	int n = 0,k;
	for(i=0;dup>0;i++)
  dc:	18 16       	cp	r1, r24
  de:	19 06       	cpc	r1, r25
  e0:	0c f0       	brlt	.+2      	; 0xe4 <_Z8intarrayi+0x26>
  e2:	3d c0       	rjmp	.+122    	; 0x15e <_Z8intarrayi+0xa0>
  e4:	e0 e0       	ldi	r30, 0x00	; 0
  e6:	f0 e0       	ldi	r31, 0x00	; 0
	{
		dup = dup/10;
  e8:	0f 2e       	mov	r0, r31
  ea:	fa e0       	ldi	r31, 0x0A	; 10
  ec:	ef 2e       	mov	r14, r31
  ee:	f1 2c       	mov	r15, r1
  f0:	f0 2d       	mov	r31, r0
  f2:	04 c0       	rjmp	.+8      	; 0xfc <_Z8intarrayi+0x3e>
		n++;
		
	}
	for(i=0;i<n;i++)
  f4:	12 16       	cp	r1, r18
  f6:	13 06       	cpc	r1, r19
  f8:	64 f0       	brlt	.+24     	; 0x112 <_Z8intarrayi+0x54>
  fa:	22 c0       	rjmp	.+68     	; 0x140 <_Z8intarrayi+0x82>
	int dup = num;
	 int dup2 = num;
	int n = 0,k;
	for(i=0;dup>0;i++)
	{
		dup = dup/10;
  fc:	b7 01       	movw	r22, r14
  fe:	45 d0       	rcall	.+138    	; 0x18a <__divmodhi4>
 100:	cb 01       	movw	r24, r22
		n++;
 102:	9f 01       	movw	r18, r30
 104:	2f 5f       	subi	r18, 0xFF	; 255
 106:	3f 4f       	sbci	r19, 0xFF	; 255
{int i;
	unsigned char number[4];
	int dup = num;
	 int dup2 = num;
	int n = 0,k;
	for(i=0;dup>0;i++)
 108:	18 16       	cp	r1, r24
 10a:	19 06       	cpc	r1, r25
 10c:	9c f7       	brge	.-26     	; 0xf4 <_Z8intarrayi+0x36>
	{
		dup = dup/10;
		n++;
 10e:	f9 01       	movw	r30, r18
 110:	f5 cf       	rjmp	.-22     	; 0xfc <_Z8intarrayi+0x3e>
 112:	ce 01       	movw	r24, r28
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	7c 01       	movw	r14, r24
 118:	5c 01       	movw	r10, r24
 11a:	a2 0e       	add	r10, r18
 11c:	b3 1e       	adc	r11, r19
		
	}
	for(i=0;i<n;i++)
	{
			k = dup2 % 10;
			number[i]= '0' + k;
 11e:	0f 2e       	mov	r0, r31
 120:	fa e0       	ldi	r31, 0x0A	; 10
 122:	cf 2e       	mov	r12, r31
 124:	d1 2c       	mov	r13, r1
 126:	f0 2d       	mov	r31, r0
 128:	c8 01       	movw	r24, r16
 12a:	b6 01       	movw	r22, r12
 12c:	2e d0       	rcall	.+92     	; 0x18a <__divmodhi4>
 12e:	80 5d       	subi	r24, 0xD0	; 208
 130:	d7 01       	movw	r26, r14
 132:	8d 93       	st	X+, r24
 134:	7d 01       	movw	r14, r26
			dup2 = (dup2)/10;
 136:	06 2f       	mov	r16, r22
 138:	17 2f       	mov	r17, r23
	{
		dup = dup/10;
		n++;
		
	}
	for(i=0;i<n;i++)
 13a:	aa 15       	cp	r26, r10
 13c:	bb 05       	cpc	r27, r11
 13e:	a1 f7       	brne	.-24     	; 0x128 <_Z8intarrayi+0x6a>
	{
			k = dup2 % 10;
			number[i]= '0' + k;
			dup2 = (dup2)/10;
	}
	for(i=n-1;i>=0;i--)
 140:	ff 23       	and	r31, r31
 142:	6c f0       	brlt	.+26     	; 0x15e <_Z8intarrayi+0xa0>
 144:	ce 01       	movw	r24, r28
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	8c 01       	movw	r16, r24
 14a:	02 0f       	add	r16, r18
 14c:	13 1f       	adc	r17, r19
 14e:	7c 01       	movw	r14, r24
	{
		uart_tx(number[i]);
 150:	f8 01       	movw	r30, r16
 152:	82 91       	ld	r24, -Z
 154:	8f 01       	movw	r16, r30
 156:	af df       	rcall	.-162    	; 0xb6 <_Z7uart_txh>
	{
			k = dup2 % 10;
			number[i]= '0' + k;
			dup2 = (dup2)/10;
	}
	for(i=n-1;i>=0;i--)
 158:	e0 16       	cp	r14, r16
 15a:	f1 06       	cpc	r15, r17
 15c:	c9 f7       	brne	.-14     	; 0x150 <_Z8intarrayi+0x92>
	{
		uart_tx(number[i]);
	}
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	ff 90       	pop	r15
 170:	ef 90       	pop	r14
 172:	df 90       	pop	r13
 174:	cf 90       	pop	r12
 176:	bf 90       	pop	r11
 178:	af 90       	pop	r10
 17a:	08 95       	ret

0000017c <main>:
unsigned char uart_rx();

void intarray(int num);

int main(void)
{  uart_init(51);
 17c:	83 e3       	ldi	r24, 0x33	; 51
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	8e df       	rcall	.-228    	; 0x9e <_Z9uart_initj>
    /* Replace with your application code */
    while (1) 
    {
		
		
		intarray(12.5);
 182:	8c e0       	ldi	r24, 0x0C	; 12
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	9b df       	rcall	.-202    	; 0xbe <_Z8intarrayi>
 188:	fc cf       	rjmp	.-8      	; 0x182 <main+0x6>

0000018a <__divmodhi4>:
 18a:	97 fb       	bst	r25, 7
 18c:	07 2e       	mov	r0, r23
 18e:	16 f4       	brtc	.+4      	; 0x194 <__divmodhi4+0xa>
 190:	00 94       	com	r0
 192:	06 d0       	rcall	.+12     	; 0x1a0 <__divmodhi4_neg1>
 194:	77 fd       	sbrc	r23, 7
 196:	08 d0       	rcall	.+16     	; 0x1a8 <__divmodhi4_neg2>
 198:	0b d0       	rcall	.+22     	; 0x1b0 <__udivmodhi4>
 19a:	07 fc       	sbrc	r0, 7
 19c:	05 d0       	rcall	.+10     	; 0x1a8 <__divmodhi4_neg2>
 19e:	3e f4       	brtc	.+14     	; 0x1ae <__divmodhi4_exit>

000001a0 <__divmodhi4_neg1>:
 1a0:	90 95       	com	r25
 1a2:	81 95       	neg	r24
 1a4:	9f 4f       	sbci	r25, 0xFF	; 255
 1a6:	08 95       	ret

000001a8 <__divmodhi4_neg2>:
 1a8:	70 95       	com	r23
 1aa:	61 95       	neg	r22
 1ac:	7f 4f       	sbci	r23, 0xFF	; 255

000001ae <__divmodhi4_exit>:
 1ae:	08 95       	ret

000001b0 <__udivmodhi4>:
 1b0:	aa 1b       	sub	r26, r26
 1b2:	bb 1b       	sub	r27, r27
 1b4:	51 e1       	ldi	r21, 0x11	; 17
 1b6:	07 c0       	rjmp	.+14     	; 0x1c6 <__udivmodhi4_ep>

000001b8 <__udivmodhi4_loop>:
 1b8:	aa 1f       	adc	r26, r26
 1ba:	bb 1f       	adc	r27, r27
 1bc:	a6 17       	cp	r26, r22
 1be:	b7 07       	cpc	r27, r23
 1c0:	10 f0       	brcs	.+4      	; 0x1c6 <__udivmodhi4_ep>
 1c2:	a6 1b       	sub	r26, r22
 1c4:	b7 0b       	sbc	r27, r23

000001c6 <__udivmodhi4_ep>:
 1c6:	88 1f       	adc	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	5a 95       	dec	r21
 1cc:	a9 f7       	brne	.-22     	; 0x1b8 <__udivmodhi4_loop>
 1ce:	80 95       	com	r24
 1d0:	90 95       	com	r25
 1d2:	bc 01       	movw	r22, r24
 1d4:	cd 01       	movw	r24, r26
 1d6:	08 95       	ret

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
